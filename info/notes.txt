
The unity branch of tf is a reduced version of the master. It doesn't contain
some of the functions that are related to instrumentation and execution. Here
are the most important variables and their contents:

suitesdir:    absolute path
suites:       array -> absolute paths
suite:        absolute path
benchs:       array -> absolute paths
bench:        absolute path
source_files: array -> absolute path
source_names: array -> $source_files relative to its $bench

What is considered a suite, benchmark or file is defined as:
  - suite: any folder placed on suites is considered a single suite
  - benchmark: any folder that contains a .c file is considered a benchmark. To
avoid duplicate and meaningless names (such as "src"), the benchmark is uniquely
identified by the path of this folder, relative to its suite. So it might
contain slashes, which are invalid filenames. If naming a file with the
benchmark name is needed, substitute the/slashes with-dashes. The only situation
where this happens in the extraction is the linkage of the source files LLVM
bytecodes in a single file. Apart from the TF programs, all the other suites
have the format suite/benchmark/file, with no intermediate folders as part of
the benchmark identification. This happens because all of them are either
synthesized or preprocessed, therefore they don't come straight from a real
structured project.
  - source files: any .c file

Tools:
  - create_dirs.sh: If a suite comes with all the source_files together in a
single folder, you can either copy this script to it and run it as:
> $ ./create_dirs.sh .
  or leave it in ./tools and run:
> $ ./tools/create_dirs.sh <dirWithManyFiles>

Values found:

  COMPILE_FLAGS=" "
  COMPILE_FLAGS=""
  COMPILE_FLAGS="-DBASE_ITERATIONS=25"
  COMPILE_FLAGS=" -DNeedFunctionPrototypes=1 -DSASR "
  COMPILE_FLAGS=" -DNOASM -DLLVM -lstdc++ -lm "
  COMPILE_FLAGS="-DSMALL_PROBLEM_SIZE"
  COMPILE_FLAGS=" -DTODD "
  COMPILE_FLAGS=" -DUNIX "
  COMPILE_FLAGS=" -DUNIX -DTRANSIZE=1050011 -DPROBES=8 -DREPORTPLY=8 "
  COMPILE_FLAGS='-DVERSION="1.00" -DCOMPDATE=""today"" -DCFLAGS="" -DHOSTNAME=""thishost"" '
  COMPILE_FLAGS="-I."
  COMPILE_FLAGS=" -I. -DPOLYBENCH_DUMP_ARRAYS "
  COMPILE_FLAGS=" -I. -lm -D_POSIX_SOURCE -DHYPRE_TIMING -DHYPRE_SEQUENTIAL"
  COMPILE_FLAGS=" -lm "
  COMPILE_FLAGS="-lm"
  COMPILE_FLAGS=" -lm -DFP_ABSTOLERANCE=1e-5 "
  COMPILE_FLAGS=" -lm -DHAVEMPGLIB -DLAMEPARSE -DNDEBUG -D__NO_MATH_INLINES -O -DLAMESNDFILE "
  COMPILE_FLAGS=" -lm -D_POSIX_SOURCE -DHYPRE_TIMING -DHYPRE_SEQUENTIAL "
  COMPILE_FLAGS=" -lm -DTORONTO "
  COMPILE_FLAGS=" -lm -DVERIFICATION "
  COMPILE_FLAGS=" -lm -fno-exceptions -lstdc++ "
  COMPILE_FLAGS=" -lm -std=gnu99 "
  COMPILE_FLAGS=" -lm -std=gnu99"
  COMPILE_FLAGS="-std=gnu89"
  COMPILE_FLAGS=" -std=gnu89 -DNOMEMOPT "
  COMPILE_FLAGS=" -std=gnu99 "
  COMPILE_FLAGS=" -std=gnu99 -lm "
  source_files=(Calignm1.c constants.c defs.c Falign.c fft.c fftFunctions.c Galign11.c COMPILE_FLAGS=" -DLLVM "
  source_files=("cfrac.c" "pops.c" "pconst.c" "pio.c" COMPILE_FLAGS="-lm -DNOMEMOPT"
  source_files=('commands.c' 'job.c' 'dir.c' 'file.c' 'load.c' 'misc.c' 'main.c' 'read.c' COMPILE_FLAGS="-DHAVE_SIGLIST -DNO_LDAV -DNOMEMOPT -DPOSIX"
  source_files=("gsmain.c" "gs.c" "gp_unix.c" "utrace.c" COMPILE_FLAGS=" -lm -DNOMEMOPT -DGS_LIB_DEFAULT=\"${PROJ_SRC_DIR}:${PROJ_SRC_DIR}/fonts\""

## OBS.: I'll probably change source_files to uppercase in the future
